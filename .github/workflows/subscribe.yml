name: Repository subscribe

on:
  repository_dispatch:
    types: [package-update]

permissions:
  contents: write
  pull-requests: write

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve default branch
        id: def
        run: echo "base=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22" # Corepack 포함

      # 1) Corepack 활성화
      - name: Enable Corepack
        run: corepack enable

      # 2) packageManager 기반으로 Yarn 버전 강제 활성화
      - name: Activate Yarn from packageManager
        id: yarnpm
        run: |
          set -e
          VER=$(node -p "require('./package.json').packageManager?.split('@')[1] || ''")
          if [ -z "$VER" ]; then
            echo "packageManager에 yarn@버전이 없습니다. (.yarnrc.yml의 yarnPath 사용 중인지 확인)"
          else
            echo "Activating yarn@${VER}"
            corepack prepare "yarn@${VER}" --activate
            echo "yarn_version=${VER}" >> $GITHUB_OUTPUT
          fi

      # 3) 실제 쓰일 바이너리/버전 확인 (중요: 'corepack yarn')
      - name: Check Yarn binary & version
        run: |
          echo "which yarn      : $(command -v yarn || true)"
          echo "corepack bins   : $(corepack bins || true)"
          corepack yarn -v

      # 4) 설치 단계도 모두 'corepack yarn' 사용
      - name: Install deps (respect lockfile)
        run: |
          YV=$(corepack yarn -v); YM=${YV%%.*}
          if [ "$YM" -ge 2 ]; then
            corepack yarn install --immutable
          else
            corepack yarn install --frozen-lockfile
          fi

      # 5) 업데이트도 'corepack yarn' 사용
      - name: Update dependencies within semver ranges
        id: update
        run: |
          YV=$(corepack yarn -v); YM=${YV%%.*}
          echo "Detected Yarn $YV"
          if [ "$YM" -ge 2 ]; then
            corepack yarn up -R
          else
            corepack yarn upgrade
          fi

      - name: Create working branch
        run: |
          BR="chore/package-update-$(date +%Y%m%d%H%M%S)"
          echo "BR=$BR" >> $GITHUB_ENV
          git checkout ${{ steps.def.outputs.base }}
          git pull --ff-only origin ${{ steps.def.outputs.base }}
          git checkout -b "$BR"

      - name: Commit changes (if any)
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "NO_CHANGES=1" >> $GITHUB_ENV
          else
            git -c user.name="github-actions[bot]" \
                -c user.email="github-actions[bot]@users.noreply.github.com" \
                commit -m "chore: package version update"
          fi

      - name: Push branch
        if: env.NO_CHANGES != '1'
        run: git push -u origin "$BR"

      - name: Open PR
        if: env.NO_CHANGES != '1'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ env.BR }}
          base: ${{ steps.def.outputs.base }}
          title: "package version update"
          body: "Automated update triggered by repository_dispatch."
          labels: dependencies
          signoff: true
